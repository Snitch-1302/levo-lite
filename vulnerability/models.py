from pydantic import BaseModel, Field
from typing import Optional, Dict, List, Any, Union
from datetime import datetime
from enum import Enum

class VulnerabilityType(str, Enum):
    """Types of API vulnerabilities"""
    IDOR = "idor"  # Insecure Direct Object Reference
    BOLA = "bola"  # Broken Object Level Authorization
    MISSING_AUTH = "missing_auth"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    WEAK_AUTH = "weak_auth"
    EXPOSED_ENDPOINT = "exposed_endpoint"
    SENSITIVE_DATA_EXPOSURE = "sensitive_data_exposure"

class SeverityLevel(str, Enum):
    """Vulnerability severity levels"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class TestStatus(str, Enum):
    """Test execution status"""
    PENDING = "pending"
    RUNNING = "running"
    PASSED = "passed"
    FAILED = "failed"
    ERROR = "error"

class UserRole(str, Enum):
    """User roles for testing"""
    ANONYMOUS = "anonymous"
    USER = "user"
    ADMIN = "admin"
    PRIVILEGED = "privileged"

class VulnerabilityTest(BaseModel):
    """Represents a vulnerability test case"""
    id: Optional[int] = None
    name: str = Field(..., description="Test name")
    description: str = Field(..., description="Test description")
    vulnerability_type: VulnerabilityType = Field(..., description="Type of vulnerability being tested")
    severity: SeverityLevel = Field(..., description="Expected severity if vulnerability exists")
    
    # Test configuration
    endpoint: str = Field(..., description="Target endpoint")
    method: str = Field(..., description="HTTP method")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="Request payload")
    headers: Optional[Dict[str, str]] = Field(default_factory=dict, description="Request headers")
    params: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Query parameters")
    
    # Test logic
    test_user: UserRole = Field(..., description="User role for testing")
    target_user: Optional[UserRole] = Field(default=None, description="Target user for IDOR/BOLA tests")
    expected_status: int = Field(..., description="Expected HTTP status code")
    expected_behavior: str = Field(..., description="Expected behavior description")
    
    # OWASP mapping
    owasp_category: str = Field(..., description="OWASP API Top 10 category")
    cwe_id: Optional[str] = Field(default=None, description="CWE identifier")
    
    class Config:
        from_attributes = True

class TestResult(BaseModel):
    """Represents the result of a vulnerability test"""
    id: Optional[int] = None
    test_id: int = Field(..., description="Reference to test case")
    test_name: str = Field(..., description="Test name")
    
    # Execution details
    status: TestStatus = Field(..., description="Test execution status")
    executed_at: datetime = Field(default_factory=datetime.utcnow, description="When test was executed")
    duration_ms: int = Field(..., description="Test execution time in milliseconds")
    
    # Request details
    request_url: str = Field(..., description="Full request URL")
    request_method: str = Field(..., description="HTTP method used")
    request_headers: Dict[str, str] = Field(default_factory=dict, description="Request headers")
    request_body: Optional[Dict[str, Any]] = Field(default=None, description="Request body")
    
    # Response details
    response_status: int = Field(..., description="Response status code")
    response_headers: Dict[str, str] = Field(default_factory=dict, description="Response headers")
    response_body: Optional[Dict[str, Any]] = Field(default=None, description="Response body")
    response_size: int = Field(..., description="Response size in bytes")
    
    # Vulnerability assessment
    vulnerability_found: bool = Field(..., description="Whether vulnerability was detected")
    vulnerability_type: Optional[VulnerabilityType] = Field(default=None, description="Type of vulnerability found")
    severity: Optional[SeverityLevel] = Field(default=None, description="Actual severity level")
    
    # Analysis
    analysis: str = Field(..., description="Detailed analysis of the test result")
    evidence: Optional[str] = Field(default=None, description="Evidence of vulnerability")
    recommendation: Optional[str] = Field(default=None, description="Security recommendation")
    
    # Metadata
    error_message: Optional[str] = Field(default=None, description="Error message if test failed")
    
    class Config:
        from_attributes = True

class VulnerabilityReport(BaseModel):
    """Comprehensive vulnerability testing report"""
    id: Optional[int] = None
    report_name: str = Field(..., description="Report name")
    target_api: str = Field(..., description="Target API URL")
    generated_at: datetime = Field(default_factory=datetime.utcnow, description="Report generation time")
    
    # Summary statistics
    total_tests: int = Field(..., description="Total tests executed")
    passed_tests: int = Field(..., description="Tests that passed (no vulnerability)")
    failed_tests: int = Field(..., description="Tests that failed (vulnerability found)")
    error_tests: int = Field(..., description="Tests with execution errors")
    
    # Vulnerability breakdown
    vulnerabilities_by_type: Dict[VulnerabilityType, int] = Field(default_factory=dict, description="Vulnerabilities by type")
    vulnerabilities_by_severity: Dict[SeverityLevel, int] = Field(default_factory=dict, description="Vulnerabilities by severity")
    
    # Test results
    results: List[TestResult] = Field(default_factory=list, description="Detailed test results")
    
    # Risk assessment
    risk_score: float = Field(..., description="Overall risk score (0-10)")
    risk_level: str = Field(..., description="Overall risk level")
    
    # OWASP coverage
    owasp_coverage: Dict[str, int] = Field(default_factory=dict, description="OWASP API Top 10 coverage")
    
    class Config:
        from_attributes = True

class TestSuite(BaseModel):
    """Collection of vulnerability tests"""
    id: Optional[int] = None
    name: str = Field(..., description="Test suite name")
    description: str = Field(..., description="Test suite description")
    version: str = Field(..., description="Test suite version")
    
    # Test cases
    tests: List[VulnerabilityTest] = Field(default_factory=list, description="Test cases in this suite")
    
    # Configuration
    target_api: str = Field(..., description="Target API base URL")
    auth_config: Optional[Dict[str, Any]] = Field(default=None, description="Authentication configuration")
    
    # Metadata
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Creation time")
    updated_at: datetime = Field(default_factory=datetime.utcnow, description="Last update time")
    
    class Config:
        from_attributes = True

class AuthConfig(BaseModel):
    """Authentication configuration for testing"""
    auth_type: str = Field(..., description="Authentication type (bearer, basic, api_key, etc.)")
    credentials: Dict[str, str] = Field(..., description="User credentials")
    tokens: Optional[Dict[str, str]] = Field(default=None, description="User tokens")
    headers: Optional[Dict[str, str]] = Field(default=None, description="Additional auth headers")
    
    class Config:
        from_attributes = True

class TestConfig(BaseModel):
    """Configuration for vulnerability testing"""
    target_api: str = Field(..., description="Target API base URL")
    timeout: int = Field(default=30, description="Request timeout in seconds")
    max_retries: int = Field(default=3, description="Maximum retry attempts")
    delay_between_requests: float = Field(default=0.5, description="Delay between requests in seconds")
    
    # Authentication
    auth_configs: Dict[UserRole, AuthConfig] = Field(default_factory=dict, description="Auth configs by user role")
    
    # Test scope
    include_endpoints: Optional[List[str]] = Field(default=None, description="Endpoints to include")
    exclude_endpoints: Optional[List[str]] = Field(default=None, description="Endpoints to exclude")
    test_types: Optional[List[VulnerabilityType]] = Field(default=None, description="Vulnerability types to test")
    
    # Reporting
    generate_report: bool = Field(default=True, description="Generate detailed report")
    export_format: str = Field(default="json", description="Report export format")
    output_file: Optional[str] = Field(default=None, description="Output file path")
    
    class Config:
        from_attributes = True 