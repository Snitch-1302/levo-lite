#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI interface for LevoLite Vulnerability Scanner
"""

import argparse
import json
import os
import sys
from datetime import datetime
from pathlib import Path

from models import TestConfig, AuthConfig, UserRole, VulnerabilityType
from scanner import VulnerabilityScanner

# Set UTF-8 encoding for Windows compatibility
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)
                                  
def create_auth_configs() -> dict:
    """Create authentication configurations for different user roles"""
    auth_configs = {}
    
    # Anonymous user (no auth)
    auth_configs[UserRole.ANONYMOUS] = AuthConfig(
        auth_type="none",
        credentials={},
        tokens=None,
        headers={}
    )
    
    # Regular user
    auth_configs[UserRole.USER] = AuthConfig(
        auth_type="bearer",
        credentials={"username": "user1", "password": "user123"},
        tokens={"access_token": "user_token_here"},  # Will be replaced with actual token
        headers={}
    )
    
    # Admin user
    auth_configs[UserRole.ADMIN] = AuthConfig(
        auth_type="bearer",
        credentials={"username": "admin", "password": "admin123"},
        tokens={"access_token": "admin_token_here"},  # Will be replaced with actual token
        headers={}
    )
    
    return auth_configs

def get_auth_tokens(target_api: str) -> dict:
    """Get authentication tokens by logging in"""
    import requests
    
    tokens = {}
    
    try:
        # Login as regular user
        user_response = requests.post(f"{target_api}/login", json={
            "username": "user1",
            "password": "user123"
        })
        
        if user_response.status_code == 200:
            user_data = user_response.json()
            tokens["user_token"] = user_data.get("access_token", "")
            print("‚úÖ Got user token")
        else:
            print("‚ö†Ô∏è  Could not get user token")
    
    except Exception as e:
        print(f"‚ö†Ô∏è  Error getting user token: {e}")
    
    try:
        # Login as admin
        admin_response = requests.post(f"{target_api}/login", json={
            "username": "admin",
            "password": "admin123"
        })
        
        if admin_response.status_code == 200:
            admin_data = admin_response.json()
            tokens["admin_token"] = admin_data.get("access_token", "")
            print("‚úÖ Got admin token")
        else:
            print("‚ö†Ô∏è  Could not get admin token")
    
    except Exception as e:
        print(f"‚ö†Ô∏è  Error getting admin token: {e}")
    
    return tokens

def update_auth_configs_with_tokens(auth_configs: dict, tokens: dict):
    """Update auth configs with actual tokens"""
    if "user_token" in tokens:
        auth_configs[UserRole.USER].tokens["access_token"] = tokens["user_token"]
    
    if "admin_token" in tokens:
        auth_configs[UserRole.ADMIN].tokens["access_token"] = tokens["admin_token"]

def main():
    """Main CLI entry point"""
    parser = argparse.ArgumentParser(description="LevoLite Vulnerability Scanner")
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Scan command
    scan_parser = subparsers.add_parser('scan', help='Run vulnerability scan')
    scan_parser.add_argument('--target', default='http://localhost:8000',
                           help='Target API URL (default: http://localhost:8000)')
    scan_parser.add_argument('--suites', nargs='+', 
                           choices=['idor_bola', 'missing_auth', 'privilege_escalation', 'all'],
                           default=['all'],
                           help='Test suites to run (default: all)')
    scan_parser.add_argument('--timeout', type=int, default=30,
                           help='Request timeout in seconds (default: 30)')
    scan_parser.add_argument('--delay', type=float, default=0.5,
                           help='Delay between requests in seconds (default: 0.5)')
    scan_parser.add_argument('--output', default='vulnerability_report.json',
                           help='Output file path (default: vulnerability_report.json)')
    scan_parser.add_argument('--format', choices=['json', 'html', 'markdown'],
                           default='json',
                           help='Report format (default: json)')
    scan_parser.add_argument('--no-auth', action='store_true',
                           help='Skip authentication token retrieval')
    
    # Test command
    test_parser = subparsers.add_parser('test', help='Test specific vulnerability type')
    test_parser.add_argument('--type', required=True,
                           choices=['idor', 'bola', 'missing_auth', 'privilege_escalation'],
                           help='Vulnerability type to test')
    test_parser.add_argument('--target', default='http://localhost:8000',
                           help='Target API URL (default: http://localhost:8000)')
    test_parser.add_argument('--endpoint', required=True,
                           help='Target endpoint to test')
    test_parser.add_argument('--method', default='GET',
                           help='HTTP method (default: GET)')
    
    # Report command
    report_parser = subparsers.add_parser('report', help='Generate report from scan results')
    report_parser.add_argument('--input', required=True,
                             help='Input scan results file')
    report_parser.add_argument('--output', default='vulnerability_report.html',
                             help='Output report file')
    report_parser.add_argument('--format', choices=['html', 'markdown', 'json'],
                             default='html',
                             help='Report format (default: html)')
    
    # Info command
    info_parser = subparsers.add_parser('info', help='Show scanner information')
    info_parser.add_argument('--target', default='http://localhost:8000',
                           help='Target API URL (default: http://localhost:8000)')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    if args.command == 'scan':
        run_scan(args)
    elif args.command == 'test':
        run_single_test(args)
    elif args.command == 'report':
        generate_report(args)
    elif args.command == 'info':
        show_info(args)

def run_scan(args):
    """Run vulnerability scan"""
    print(f"üîç Starting vulnerability scan for {args.target}")
    
    # Create auth configs
    auth_configs = create_auth_configs()
    
    # Get authentication tokens if not skipped
    if not args.no_auth:
        print("üîê Getting authentication tokens...")
        tokens = get_auth_tokens(args.target)
        update_auth_configs_with_tokens(auth_configs, tokens)
    
    # Create test config
    config = TestConfig(
        target_api=args.target,
        timeout=args.timeout,
        delay_between_requests=args.delay,
        auth_configs=auth_configs,
        output_file=args.output
    )
    
    # Create scanner
    scanner = VulnerabilityScanner(config)
    
    # Determine suites to run
    suites_to_run = args.suites
    if 'all' in suites_to_run:
        suites_to_run = ['idor_bola', 'missing_auth', 'privilege_escalation']
    
    # Run scan
    try:
        report = scanner.run_tests(suites_to_run)
        
        # Save report
        save_report(report, args.output, args.format)
        
        # Print summary
        print_summary(report)
        
    except Exception as e:
        print(f"‚ùå Scan failed: {e}")
        sys.exit(1)

def run_single_test(args):
    """Run a single vulnerability test"""
    print(f"üß™ Running {args.type} test on {args.endpoint}")
    
    # Create auth configs
    auth_configs = create_auth_configs()
    
    # Get tokens
    tokens = get_auth_tokens(args.target)
    update_auth_configs_with_tokens(auth_configs, tokens)
    
    # Create test config
    config = TestConfig(
        target_api=args.target,
        auth_configs=auth_configs
    )
    
    # Create scanner
    scanner = VulnerabilityScanner(config)
    
    # Find the specific test
    test_found = False
    for suite_name, suite in scanner.test_suites.items():
        for test in suite.tests:
            if (test.vulnerability_type.value == args.type and 
                test.endpoint == args.endpoint and 
                test.method == args.method):
                
                print(f"üîç Running test: {test.name}")
                result = scanner._execute_test(test)
                
                print_test_result(result)
                test_found = True
                break
        
        if test_found:
            break
    
    if not test_found:
        print(f"‚ùå No test found for {args.type} on {args.endpoint}")
        sys.exit(1)

def generate_report(args):
    """Generate report from scan results"""
    print(f"üìä Generating report from {args.input}")
    
    if not os.path.exists(args.input):
        print(f"‚ùå Input file not found: {args.input}")
        sys.exit(1)
    
    try:
        with open(args.input, 'r') as f:
            data = json.load(f)
        
        # Convert back to report object
        from models import VulnerabilityReport, TestResult
        report = VulnerabilityReport(**data)
        
        # Save report
        save_report(report, args.output, args.format)
        
        print(f"‚úÖ Report generated: {args.output}")
        
    except Exception as e:
        print(f"‚ùå Error generating report: {e}")
        sys.exit(1)

def show_info(args):
    """Show scanner information"""
    print("üìã Vulnerability Scanner Information")
    print("=" * 40)
    
    print(f"Target API: {args.target}")
    print(f"Available test suites:")
    print("  - idor_bola: IDOR and BOLA vulnerability tests")
    print("  - missing_auth: Missing authentication tests")
    print("  - privilege_escalation: Privilege escalation tests")
    
    print(f"\nVulnerability types:")
    print("  - IDOR: Insecure Direct Object Reference")
    print("  - BOLA: Broken Object Level Authorization")
    print("  - Missing Auth: Missing authentication on sensitive endpoints")
    print("  - Privilege Escalation: Unauthorized privilege escalation")
    
    print(f"\nOWASP API Top 10 Coverage:")
    print("  - API1:2023 - Broken Object Level Authorization")
    print("  - API2:2023 - Broken Authentication")
    
    # Test API connectivity
    try:
        import requests
        response = requests.get(f"{args.target}/health", timeout=5)
        if response.status_code == 200:
            print(f"\n‚úÖ API is accessible")
        else:
            print(f"\n‚ö†Ô∏è  API returned status {response.status_code}")
    except Exception as e:
        print(f"\n‚ùå Cannot connect to API: {e}")

def save_report(report, output_file: str, format_type: str):
    """Save report in specified format"""
    if format_type == 'json':
        with open(output_file, 'w') as f:
            json.dump(report.dict(), f, indent=2, default=str)
    
    elif format_type == 'html':
        html_content = generate_html_report(report)
        with open(output_file, 'w') as f:
            f.write(html_content)
    
    elif format_type == 'markdown':
        md_content = generate_markdown_report(report)
        with open(output_file, 'w') as f:
            f.write(md_content)

def generate_html_report(report) -> str:
    """Generate HTML report"""
    html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Vulnerability Report - {report.report_name}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .header {{ background-color: #f0f0f0; padding: 20px; border-radius: 5px; }}
        .summary {{ margin: 20px 0; }}
        .vulnerability {{ margin: 10px 0; padding: 10px; border-left: 4px solid #ff4444; background-color: #fff5f5; }}
        .passed {{ border-left-color: #44ff44; background-color: #f5fff5; }}
        .critical {{ border-left-color: #ff0000; }}
        .high {{ border-left-color: #ff6600; }}
        .medium {{ border-left-color: #ffaa00; }}
        .low {{ border-left-color: #ffdd00; }}
        .risk-score {{ font-size: 24px; font-weight: bold; }}
        .risk-critical {{ color: #ff0000; }}
        .risk-high {{ color: #ff6600; }}
        .risk-medium {{ color: #ffaa00; }}
        .risk-low {{ color: #ffdd00; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç Vulnerability Report</h1>
        <p><strong>Report:</strong> {report.report_name}</p>
        <p><strong>Target:</strong> {report.target_api}</p>
        <p><strong>Generated:</strong> {report.generated_at}</p>
    </div>
    
    <div class="summary">
        <h2>üìä Summary</h2>
        <p><strong>Total Tests:</strong> {report.total_tests}</p>
        <p><strong>Passed:</strong> {report.passed_tests}</p>
        <p><strong>Failed:</strong> {report.failed_tests}</p>
        <p><strong>Errors:</strong> {report.error_tests}</p>
        
        <div class="risk-score risk-{report.risk_level.lower()}">
            Risk Score: {report.risk_score:.1f}/10 ({report.risk_level})
        </div>
    </div>
    
    <div class="vulnerabilities">
        <h2>üö® Vulnerabilities Found</h2>
    """
    
    for result in report.results:
        if result.vulnerability_found:
            severity_class = result.severity.value if result.severity else "medium"
            html += f"""
        <div class="vulnerability {severity_class}">
            <h3>‚ùå {result.test_name}</h3>
            <p><strong>Type:</strong> {result.vulnerability_type.value if result.vulnerability_type else 'Unknown'}</p>
            <p><strong>Severity:</strong> {result.severity.value if result.severity else 'Unknown'}</p>
            <p><strong>Endpoint:</strong> {result.request_method} {result.request_url}</p>
            <p><strong>Analysis:</strong> {result.analysis}</p>
            {f'<p><strong>Recommendation:</strong> {result.recommendation}</p>' if result.recommendation else ''}
        </div>
            """
        else:
            html += f"""
        <div class="vulnerability passed">
            <h3>‚úÖ {result.test_name}</h3>
            <p><strong>Status:</strong> Passed</p>
            <p><strong>Endpoint:</strong> {result.request_method} {result.request_url}</p>
        </div>
            """
    
    html += """
    </div>
</body>
</html>
    """
    
    return html

def generate_markdown_report(report) -> str:
    """Generate Markdown report"""
    md = f"""# üîç Vulnerability Report

**Report:** {report.report_name}  
**Target:** {report.target_api}  
**Generated:** {report.generated_at}

## üìä Summary

- **Total Tests:** {report.total_tests}
- **Passed:** {report.passed_tests}
- **Failed:** {report.failed_tests}
- **Errors:** {report.error_tests}
- **Risk Score:** {report.risk_score:.1f}/10 ({report.risk_level})

## üö® Vulnerabilities Found

"""
    
    for result in report.results:
        if result.vulnerability_found:
            md += f"""### ‚ùå {result.test_name}

- **Type:** {result.vulnerability_type.value if result.vulnerability_type else 'Unknown'}
- **Severity:** {result.severity.value if result.severity else 'Unknown'}
- **Endpoint:** {result.request_method} {result.request_url}
- **Analysis:** {result.analysis}
"""
            if result.recommendation:
                md += f"- **Recommendation:** {result.recommendation}\n"
            md += "\n"
        else:
            md += f"""### ‚úÖ {result.test_name}

- **Status:** Passed
- **Endpoint:** {result.request_method} {result.request_url}

"""
    
    return md

def print_summary(report):
    """Print scan summary"""
    print(f"\n{'='*60}")
    print(f"üìä SCAN SUMMARY")
    print(f"{'='*60}")
    print(f"Target API: {report.target_api}")
    print(f"Total Tests: {report.total_tests}")
    print(f"Passed: {report.passed_tests}")
    print(f"Failed: {report.failed_tests}")
    print(f"Errors: {report.error_tests}")
    print(f"Risk Score: {report.risk_score:.1f}/10 ({report.risk_level})")
    
    if report.failed_tests > 0:
        print(f"\nüö® VULNERABILITIES FOUND:")
        for result in report.results:
            if result.vulnerability_found:
                print(f"  ‚ùå {result.test_name}")
                print(f"     Type: {result.vulnerability_type.value if result.vulnerability_type else 'Unknown'}")
                print(f"     Severity: {result.severity.value if result.severity else 'Unknown'}")
                print(f"     Endpoint: {result.request_method} {result.request_url}")
                print()
    else:
        print(f"\n‚úÖ No vulnerabilities found!")

def print_test_result(result):
    """Print single test result"""
    print(f"\n{'='*40}")
    print(f"Test: {result.test_name}")
    print(f"Status: {result.status.value}")
    print(f"Endpoint: {result.request_method} {result.request_url}")
    print(f"Response: {result.response_status}")
    
    if result.vulnerability_found:
        print(f"üö® VULNERABILITY FOUND!")
        print(f"Type: {result.vulnerability_type.value if result.vulnerability_type else 'Unknown'}")
        print(f"Severity: {result.severity.value if result.severity else 'Unknown'}")
        print(f"Analysis: {result.analysis}")
        if result.recommendation:
            print(f"Recommendation: {result.recommendation}")
    else:
        print(f"‚úÖ Test passed - no vulnerability found")
    
    print(f"{'='*40}")

if __name__ == "__main__":
    main()