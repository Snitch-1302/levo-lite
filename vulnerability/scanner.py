import requests
import time
import json
import sqlite3
from typing import List, Dict, Any, Optional
from datetime import datetime
import re
from colorama import Fore, Style, init

from models import (
    VulnerabilityTest, TestResult, VulnerabilityReport, TestSuite,
    VulnerabilityType, SeverityLevel, TestStatus, UserRole,
    AuthConfig, TestConfig
)

# Initialize colorama for colored output
init(autoreset=True)

class VulnerabilityScanner:
    """Main vulnerability scanner for API security testing"""
    
    def __init__(self, config: TestConfig):
        self.config = config
        self.session = requests.Session()
        self.session.timeout = config.timeout
        self.results: List[TestResult] = []
        
        # Load discovered endpoints for testing
        self.discovered_endpoints = self._load_discovered_endpoints()
        
        # Initialize test suites
        self.test_suites = self._create_test_suites()
    
    def _load_discovered_endpoints(self) -> List[Dict[str, Any]]:
        """Load discovered endpoints from database"""
        try:
            conn = sqlite3.connect("discovery.db")
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT path, method, has_auth, security_level, contains_sensitive_data
                FROM endpoints
                ORDER BY path, method
            ''')
            
            endpoints = []
            for row in cursor.fetchall():
                endpoints.append({
                    'path': row[0],
                    'method': row[1],
                    'has_auth': bool(row[2]),
                    'security_level': row[3],
                    'contains_sensitive_data': bool(row[4])
                })
            
            conn.close()
            return endpoints
        except Exception as e:
            print(f"⚠️  Warning: Could not load discovered endpoints: {e}")
            return []
    
    def _create_test_suites(self) -> Dict[str, TestSuite]:
        """Create comprehensive test suites for different vulnerability types"""
        
        suites = {}
        
        # IDOR/BOLA Test Suite
        idor_tests = [
            VulnerabilityTest(
                name="IDOR - User Profile Access",
                description="Test if user can access other users' profiles",
                vulnerability_type=VulnerabilityType.IDOR,
                severity=SeverityLevel.HIGH,
                endpoint="/profiles/{user_id}",
                method="GET",
                test_user=UserRole.USER,
                target_user=UserRole.USER,
                expected_status=403,
                expected_behavior="Should deny access to other user's profile",
                owasp_category="API1:2023 - Broken Object Level Authorization",
                cwe_id="CWE-639"
            ),
            VulnerabilityTest(
                name="IDOR - User Data Access",
                description="Test if user can access other users' data",
                vulnerability_type=VulnerabilityType.IDOR,
                severity=SeverityLevel.HIGH,
                endpoint="/users/{user_id}",
                method="GET",
                test_user=UserRole.USER,
                target_user=UserRole.USER,
                expected_status=403,
                expected_behavior="Should deny access to other user's data",
                owasp_category="API1:2023 - Broken Object Level Authorization",
                cwe_id="CWE-639"
            ),
            VulnerabilityTest(
                name="BOLA - Admin Endpoint Access",
                description="Test if regular user can access admin endpoints",
                vulnerability_type=VulnerabilityType.BOLA,
                severity=SeverityLevel.CRITICAL,
                endpoint="/admin/users",
                method="GET",
                test_user=UserRole.USER,
                target_user=UserRole.ADMIN,
                expected_status=403,
                expected_behavior="Should deny access to admin endpoints",
                owasp_category="API1:2023 - Broken Object Level Authorization",
                cwe_id="CWE-285"
            )
        ]
        
        suites['idor_bola'] = TestSuite(
            name="IDOR/BOLA Test Suite",
            description="Tests for Insecure Direct Object References and Broken Object Level Authorization",
            version="1.0.0",
            target_api=self.config.target_api,
            tests=idor_tests
        )
        
        # Missing Authentication Test Suite
        missing_auth_tests = [
            VulnerabilityTest(
                name="Missing Auth - Sensitive Endpoint",
                description="Test if sensitive endpoint requires authentication",
                vulnerability_type=VulnerabilityType.MISSING_AUTH,
                severity=SeverityLevel.CRITICAL,
                endpoint="/internal/users",
                method="GET",
                test_user=UserRole.ANONYMOUS,
                target_user=None,
                expected_status=401,
                expected_behavior="Should require authentication",
                owasp_category="API2:2023 - Broken Authentication",
                cwe_id="CWE-306"
            ),
            VulnerabilityTest(
                name="Missing Auth - Admin Endpoint",
                description="Test if admin endpoint requires authentication",
                vulnerability_type=VulnerabilityType.MISSING_AUTH,
                severity=SeverityLevel.CRITICAL,
                endpoint="/admin/users",
                method="GET",
                test_user=UserRole.ANONYMOUS,
                target_user=None,
                expected_status=401,
                expected_behavior="Should require authentication",
                owasp_category="API2:2023 - Broken Authentication",
                cwe_id="CWE-306"
            ),
            VulnerabilityTest(
                name="Missing Auth - Debug Endpoint",
                description="Test if debug endpoint requires authentication",
                vulnerability_type=VulnerabilityType.MISSING_AUTH,
                severity=SeverityLevel.HIGH,
                endpoint="/debug/users",
                method="GET",
                test_user=UserRole.ANONYMOUS,
                target_user=None,
                expected_status=401,
                expected_behavior="Should require authentication",
                owasp_category="API2:2023 - Broken Authentication",
                cwe_id="CWE-306"
            )
        ]
        
        suites['missing_auth'] = TestSuite(
            name="Missing Authentication Test Suite",
            description="Tests for endpoints that should require authentication but don't",
            version="1.0.0",
            target_api=self.config.target_api,
            tests=missing_auth_tests
        )
        
        # Privilege Escalation Test Suite
        privilege_escalation_tests = [
            VulnerabilityTest(
                name="Privilege Escalation - User to Admin",
                description="Test if regular user can perform admin actions",
                vulnerability_type=VulnerabilityType.PRIVILEGE_ESCALATION,
                severity=SeverityLevel.CRITICAL,
                endpoint="/admin/users",
                method="GET",
                test_user=UserRole.USER,
                target_user=UserRole.ADMIN,
                expected_status=403,
                expected_behavior="Should deny admin access to regular user",
                owasp_category="API1:2023 - Broken Object Level Authorization",
                cwe_id="CWE-285"
            ),
            VulnerabilityTest(
                name="Privilege Escalation - Delete User",
                description="Test if regular user can delete other users",
                vulnerability_type=VulnerabilityType.PRIVILEGE_ESCALATION,
                severity=SeverityLevel.CRITICAL,
                endpoint="/admin/users/{user_id}",
                method="DELETE",
                test_user=UserRole.USER,
                target_user=UserRole.ADMIN,
                expected_status=403,
                expected_behavior="Should deny delete access to regular user",
                owasp_category="API1:2023 - Broken Object Level Authorization",
                cwe_id="CWE-285"
            )
        ]
        
        suites['privilege_escalation'] = TestSuite(
            name="Privilege Escalation Test Suite",
            description="Tests for privilege escalation vulnerabilities",
            version="1.0.0",
            target_api=self.config.target_api,
            tests=privilege_escalation_tests
        )
        
        return suites
    
    def _get_auth_headers(self, user_role: UserRole) -> Dict[str, str]:
        """Get authentication headers for a specific user role"""
        if user_role == UserRole.ANONYMOUS:
            return {}
        
        if user_role not in self.config.auth_configs:
            print(f"⚠️  Warning: No auth config for user role {user_role}")
            return {}
        
        auth_config = self.config.auth_configs[user_role]
        headers = {}
        
        if auth_config.auth_type == "bearer" and auth_config.tokens:
            headers["Authorization"] = f"Bearer {auth_config.tokens.get('access_token', '')}"
        elif auth_config.auth_type == "basic" and auth_config.credentials:
            import base64
            username = auth_config.credentials.get('username', '')
            password = auth_config.credentials.get('password', '')
            credentials = base64.b64encode(f"{username}:{password}".encode()).decode()
            headers["Authorization"] = f"Basic {credentials}"
        elif auth_config.auth_type == "api_key" and auth_config.tokens:
            headers["X-API-Key"] = auth_config.tokens.get('api_key', '')
        
        # Add additional headers
        if auth_config.headers:
            headers.update(auth_config.headers)
        
        return headers
    
    def _execute_test(self, test: VulnerabilityTest) -> TestResult:
        """Execute a single vulnerability test"""
        start_time = time.time()
        
        # Prepare request
        url = f"{self.config.target_api}{test.endpoint}"
        
        # Replace path parameters
        if "{user_id}" in url:
            if test.test_user == UserRole.USER:
                url = url.replace("{user_id}", "2")  # Try to access user 2's data
            elif test.test_user == UserRole.ADMIN:
                url = url.replace("{user_id}", "1")  # Try to access user 1's data
        
        headers = self._get_auth_headers(test.test_user)
        if test.headers:
            headers.update(test.headers)
        
        # Add content-type for POST requests
        if test.method in ["POST", "PUT", "PATCH"] and test.payload:
            headers["Content-Type"] = "application/json"
        
        try:
            # Make request
            if test.method == "GET":
                response = self.session.get(url, headers=headers, params=test.params)
            elif test.method == "POST":
                response = self.session.post(url, headers=headers, json=test.payload, params=test.params)
            elif test.method == "PUT":
                response = self.session.put(url, headers=headers, json=test.payload, params=test.params)
            elif test.method == "DELETE":
                response = self.session.delete(url, headers=headers, params=test.params)
            else:
                response = self.session.request(test.method, url, headers=headers, json=test.payload, params=test.params)
            
            duration_ms = int((time.time() - start_time) * 1000)
            
            # Analyze response
            vulnerability_found = self._analyze_vulnerability(test, response)
            severity = self._determine_severity(test, response, vulnerability_found)
            analysis = self._generate_analysis(test, response, vulnerability_found)
            evidence = self._generate_evidence(test, response, vulnerability_found)
            recommendation = self._generate_recommendation(test, vulnerability_found)
            
            return TestResult(
                test_id=test.id or 0,
                test_name=test.name,
                status=TestStatus.FAILED if vulnerability_found else TestStatus.PASSED,
                executed_at=datetime.utcnow(),
                duration_ms=duration_ms,
                request_url=url,
                request_method=test.method,
                request_headers=headers,
                request_body=test.payload,
                response_status=response.status_code,
                response_headers=dict(response.headers),
                response_body=response.json() if response.content else None,
                response_size=len(response.content) if response.content else 0,
                vulnerability_found=vulnerability_found,
                vulnerability_type=test.vulnerability_type if vulnerability_found else None,
                severity=severity,
                analysis=analysis,
                evidence=evidence,
                recommendation=recommendation
            )
            
        except Exception as e:
            duration_ms = int((time.time() - start_time) * 1000)
            return TestResult(
                test_id=test.id or 0,
                test_name=test.name,
                status=TestStatus.ERROR,
                executed_at=datetime.utcnow(),
                duration_ms=duration_ms,
                request_url=url,
                request_method=test.method,
                request_headers=headers,
                request_body=test.payload,
                response_status=0,
                response_headers={},
                response_body=None,
                response_size=0,
                vulnerability_found=False,
                vulnerability_type=None,
                severity=None,
                analysis=f"Test failed with error: {str(e)}",
                evidence=None,
                recommendation="Check network connectivity and API availability",
                error_message=str(e)
            )
    
    def _analyze_vulnerability(self, test: VulnerabilityTest, response: requests.Response) -> bool:
        """Analyze if a vulnerability was found based on the response"""
        
        if test.vulnerability_type == VulnerabilityType.IDOR:
            # IDOR: Should get 403 for unauthorized access, but got 200
            return response.status_code == 200 and test.expected_status == 403
        
        elif test.vulnerability_type == VulnerabilityType.BOLA:
            # BOLA: Should get 403 for unauthorized access, but got 200
            return response.status_code == 200 and test.expected_status == 403
        
        elif test.vulnerability_type == VulnerabilityType.MISSING_AUTH:
            # Missing Auth: Should get 401 for unauthenticated access, but got 200
            return response.status_code == 200 and test.expected_status == 401
        
        elif test.vulnerability_type == VulnerabilityType.PRIVILEGE_ESCALATION:
            # Privilege Escalation: Should get 403 for unauthorized access, but got 200
            return response.status_code == 200 and test.expected_status == 403
        
        return False
    
    def _determine_severity(self, test: VulnerabilityTest, response: requests.Response, vulnerability_found: bool) -> SeverityLevel:
        """Determine the actual severity of the vulnerability"""
        if not vulnerability_found:
            return SeverityLevel.LOW
        
        # Base severity on the test type and response
        if test.vulnerability_type in [VulnerabilityType.IDOR, VulnerabilityType.BOLA]:
            if response.status_code == 200:
                return SeverityLevel.HIGH
        elif test.vulnerability_type == VulnerabilityType.MISSING_AUTH:
            if response.status_code == 200:
                return SeverityLevel.CRITICAL
        elif test.vulnerability_type == VulnerabilityType.PRIVILEGE_ESCALATION:
            if response.status_code == 200:
                return SeverityLevel.CRITICAL
        
        return test.severity
    
    def _generate_analysis(self, test: VulnerabilityTest, response: requests.Response, vulnerability_found: bool) -> str:
        """Generate detailed analysis of the test result"""
        if vulnerability_found:
            return f"VULNERABILITY FOUND: {test.description}. Expected {test.expected_status}, got {response.status_code}. {test.expected_behavior}"
        else:
            return f"SECURE: {test.description}. Got expected status {response.status_code}. {test.expected_behavior}"
    
    def _generate_evidence(self, test: VulnerabilityTest, response: requests.Response, vulnerability_found: bool) -> Optional[str]:
        """Generate evidence of the vulnerability"""
        if not vulnerability_found:
            return None
        
        evidence = f"Endpoint: {test.endpoint}\n"
        evidence += f"Method: {test.method}\n"
        evidence += f"Test User: {test.test_user}\n"
        evidence += f"Expected Status: {test.expected_status}\n"
        evidence += f"Actual Status: {response.status_code}\n"
        
        if response.content:
            try:
                response_data = response.json()
                evidence += f"Response Data: {json.dumps(response_data, indent=2)}"
            except:
                evidence += f"Response Content: {response.text[:500]}"
        
        return evidence
    
    def _generate_recommendation(self, test: VulnerabilityTest, vulnerability_found: bool) -> Optional[str]:
        """Generate security recommendation"""
        if not vulnerability_found:
            return None
        
        if test.vulnerability_type == VulnerabilityType.IDOR:
            return "Implement proper authorization checks to ensure users can only access their own resources"
        elif test.vulnerability_type == VulnerabilityType.BOLA:
            return "Add role-based access control and verify user permissions before allowing access"
        elif test.vulnerability_type == VulnerabilityType.MISSING_AUTH:
            return "Add authentication requirement to this sensitive endpoint"
        elif test.vulnerability_type == VulnerabilityType.PRIVILEGE_ESCALATION:
            return "Implement proper role-based authorization and verify user privileges"
        
        return "Review and fix the identified security vulnerability"
    
    def run_tests(self, suite_names: Optional[List[str]] = None) -> VulnerabilityReport:
        """Run vulnerability tests and generate report"""
        print(f"{Fore.CYAN}🔍 Starting vulnerability scan for {self.config.target_api}{Style.RESET_ALL}")
        
        all_tests = []
        
        # Determine which suites to run
        suites_to_run = suite_names or list(self.test_suites.keys())
        
        for suite_name in suites_to_run:
            if suite_name not in self.test_suites:
                print(f"{Fore.YELLOW}⚠️  Warning: Test suite '{suite_name}' not found{Style.RESET_ALL}")
                continue
            
            suite = self.test_suites[suite_name]
            print(f"\n{Fore.BLUE}📋 Running {suite.name} ({len(suite.tests)} tests){Style.RESET_ALL}")
            
            for test in suite.tests:
                print(f"  🔍 {test.name}...", end=" ")
                
                result = self._execute_test(test)
                self.results.append(result)
                
                if result.status == TestStatus.PASSED:
                    print(f"{Fore.GREEN}✅ PASS{Style.RESET_ALL}")
                elif result.status == TestStatus.FAILED:
                    print(f"{Fore.RED}❌ FAIL{Style.RESET_ALL}")
                else:
                    print(f"{Fore.YELLOW}⚠️  ERROR{Style.RESET_ALL}")
                
                # Add delay between requests
                time.sleep(self.config.delay_between_requests)
        
        return self._generate_report()
    
    def _generate_report(self) -> VulnerabilityReport:
        """Generate comprehensive vulnerability report"""
        total_tests = len(self.results)
        passed_tests = len([r for r in self.results if r.status == TestStatus.PASSED])
        failed_tests = len([r for r in self.results if r.status == TestStatus.FAILED])
        error_tests = len([r for r in self.results if r.status == TestStatus.ERROR])
        
        # Count vulnerabilities by type
        vulnerabilities_by_type = {}
        vulnerabilities_by_severity = {}
        
        for result in self.results:
            if result.vulnerability_found and result.vulnerability_type:
                vulnerabilities_by_type[result.vulnerability_type] = vulnerabilities_by_type.get(result.vulnerability_type, 0) + 1
                if result.severity:
                    vulnerabilities_by_severity[result.severity] = vulnerabilities_by_severity.get(result.severity, 0) + 1
        
        # Calculate risk score (0-10)
        risk_score = 0
        if failed_tests > 0:
            risk_score = min(10, (failed_tests / total_tests) * 10)
        
        # Determine risk level
        if risk_score >= 8:
            risk_level = "CRITICAL"
        elif risk_score >= 6:
            risk_level = "HIGH"
        elif risk_score >= 4:
            risk_level = "MEDIUM"
        elif risk_score >= 2:
            risk_level = "LOW"
        else:
            risk_level = "MINIMAL"
        
        # OWASP coverage
        owasp_coverage = {}
        for result in self.results:
            if result.vulnerability_found:
                # Map to OWASP categories
                if result.vulnerability_type in [VulnerabilityType.IDOR, VulnerabilityType.BOLA]:
                    owasp_coverage["API1:2023 - Broken Object Level Authorization"] = owasp_coverage.get("API1:2023 - Broken Object Level Authorization", 0) + 1
                elif result.vulnerability_type == VulnerabilityType.MISSING_AUTH:
                    owasp_coverage["API2:2023 - Broken Authentication"] = owasp_coverage.get("API2:2023 - Broken Authentication", 0) + 1
                elif result.vulnerability_type == VulnerabilityType.PRIVILEGE_ESCALATION:
                    owasp_coverage["API1:2023 - Broken Object Level Authorization"] = owasp_coverage.get("API1:2023 - Broken Object Level Authorization", 0) + 1
        
        return VulnerabilityReport(
            report_name=f"API Security Scan - {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}",
            target_api=self.config.target_api,
            generated_at=datetime.utcnow(),
            total_tests=total_tests,
            passed_tests=passed_tests,
            failed_tests=failed_tests,
            error_tests=error_tests,
            vulnerabilities_by_type=vulnerabilities_by_type,
            vulnerabilities_by_severity=vulnerabilities_by_severity,
            results=self.results,
            risk_score=risk_score,
            risk_level=risk_level,
            owasp_coverage=owasp_coverage
        ) 