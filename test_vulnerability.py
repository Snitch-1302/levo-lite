#!/usr/bin/env python3
"""
Test script for LevoLite Vulnerability Scanner
This script demonstrates the vulnerability testing functionality
"""

import os
import sys
import requests
import time
from vulnerability.scanner import VulnerabilityScanner
from vulnerability.models import TestConfig, AuthConfig, UserRole

def check_api_running():
    """Check if the API server is running"""
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        return response.status_code == 200
    except:
        return False

def get_auth_tokens():
    """Get authentication tokens for testing"""
    print("🔐 Getting authentication tokens...")
    
    tokens = {}
    
    try:
        # Login as regular user
        user_response = requests.post("http://localhost:8000/login", json={
            "username": "user1",
            "password": "user123"
        })
        
        if user_response.status_code == 200:
            user_data = user_response.json()
            tokens["user_token"] = user_data.get("access_token", "")
            print("✅ Got user token")
        else:
            print("⚠️  Could not get user token")
    
    except Exception as e:
        print(f"⚠️  Error getting user token: {e}")
    
    try:
        # Login as admin
        admin_response = requests.post("http://localhost:8000/login", json={
            "username": "admin",
            "password": "admin123"
        })
        
        if admin_response.status_code == 200:
            admin_data = admin_response.json()
            tokens["admin_token"] = admin_data.get("access_token", "")
            print("✅ Got admin token")
        else:
            print("⚠️  Could not get admin token")
    
    except Exception as e:
        print(f"⚠️  Error getting admin token: {e}")
    
    return tokens

def create_test_config(tokens: dict):
    """Create test configuration with authentication"""
    auth_configs = {}
    
    # Anonymous user (no auth)
    auth_configs[UserRole.ANONYMOUS] = AuthConfig(
        auth_type="none",
        credentials={},
        tokens=None,
        headers={}
    )
    
    # Regular user
    auth_configs[UserRole.USER] = AuthConfig(
        auth_type="bearer",
        credentials={"username": "user1", "password": "user123"},
        tokens={"access_token": tokens.get("user_token", "")},
        headers={}
    )
    
    # Admin user
    auth_configs[UserRole.ADMIN] = AuthConfig(
        auth_type="bearer",
        credentials={"username": "admin", "password": "admin123"},
        tokens={"access_token": tokens.get("admin_token", "")},
        headers={}
    )
    
    return TestConfig(
        target_api="http://localhost:8000",
        timeout=30,
        delay_between_requests=0.5,
        auth_configs=auth_configs,
        output_file="vulnerability_report.json"
    )

def run_vulnerability_scan():
    """Run the vulnerability scan"""
    print("🔍 Running vulnerability scan...")
    
    # Get auth tokens
    tokens = get_auth_tokens()
    
    # Create test config
    config = create_test_config(tokens)
    
    # Create scanner
    scanner = VulnerabilityScanner(config)
    
    # Run all test suites
    report = scanner.run_tests(['idor_bola', 'missing_auth', 'privilege_escalation'])
    
    return report

def show_detailed_results(report):
    """Show detailed scan results"""
    print(f"\n📋 DETAILED RESULTS")
    print(f"{'='*60}")
    
    for i, result in enumerate(report.results, 1):
        print(f"\n{i}. {result.test_name}")
        print(f"   Status: {result.status.value}")
        print(f"   Endpoint: {result.request_method} {result.request_url}")
        print(f"   Response: {result.response_status}")
        print(f"   Duration: {result.duration_ms}ms")
        
        if result.vulnerability_found:
            print(f"   🚨 VULNERABILITY FOUND!")
            print(f"   Type: {result.vulnerability_type.value if result.vulnerability_type else 'Unknown'}")
            print(f"   Severity: {result.severity.value if result.severity else 'Unknown'}")
            print(f"   Analysis: {result.analysis}")
            if result.recommendation:
                print(f"   Recommendation: {result.recommendation}")
        else:
            print(f"   ✅ No vulnerability found")
        
        if result.error_message:
            print(f"   Error: {result.error_message}")

def show_vulnerability_breakdown(report):
    """Show vulnerability breakdown by type and severity"""
    print(f"\n📊 VULNERABILITY BREAKDOWN")
    print(f"{'='*60}")
    
    # By type
    print(f"\nBy Type:")
    for vuln_type, count in report.vulnerabilities_by_type.items():
        print(f"  {vuln_type.value}: {count}")
    
    # By severity
    print(f"\nBy Severity:")
    for severity, count in report.vulnerabilities_by_severity.items():
        print(f"  {severity.value}: {count}")
    
    # OWASP coverage
    print(f"\nOWASP API Top 10 Coverage:")
    for category, count in report.owasp_coverage.items():
        print(f"  {category}: {count} vulnerabilities")

def save_report_files(report):
    """Save report in multiple formats"""
    print(f"\n💾 Saving report files...")
    
    # Save JSON report
    import json
    with open("vulnerability_report.json", "w") as f:
        json.dump(report.dict(), f, indent=2, default=str)
    print("✅ vulnerability_report.json")
    
    # Save HTML report
    from vulnerability.cli import generate_html_report
    html_content = generate_html_report(report)
    with open("vulnerability_report.html", "w") as f:
        f.write(html_content)
    print("✅ vulnerability_report.html")
    
    # Save Markdown report
    from vulnerability.cli import generate_markdown_report
    md_content = generate_markdown_report(report)
    with open("vulnerability_report.md", "w") as f:
        f.write(md_content)
    print("✅ vulnerability_report.md")

def main():
    """Main test function"""
    print("🧪 LevoLite Vulnerability Scanner Test")
    print("=" * 60)
    
    # Check if API is running
    if not check_api_running():
        print("❌ API server is not running!")
        print("Please start the API server first:")
        print("  cd app && uvicorn main:app --reload --port 8000")
        return
    
    print("✅ API server is running")
    
    # Run vulnerability scan
    try:
        report = run_vulnerability_scan()
        
        # Show results
        show_detailed_results(report)
        show_vulnerability_breakdown(report)
        
        # Save reports
        save_report_files(report)
        
        print(f"\n🎉 Vulnerability scan completed!")
        print(f"\n📁 Generated reports:")
        print(f"  - vulnerability_report.json (JSON format)")
        print(f"  - vulnerability_report.html (HTML format)")
        print(f"  - vulnerability_report.md (Markdown format)")
        
        print(f"\n💡 To run specific tests:")
        print(f"  python vulnerability/cli.py test --type idor --endpoint /users/2")
        print(f"  python vulnerability/cli.py test --type missing_auth --endpoint /internal/users")
        
        print(f"\n🔍 To run full scan:")
        print(f"  python vulnerability/cli.py scan")
        
    except Exception as e:
        print(f"❌ Vulnerability scan failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 